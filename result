success
TYPE		int
WORD		1
PUNCTUATOR		(
PUNCTUATOR		)
PUNCTUATOR		{
WORD		2
PUNCTUATOR		(
CONST		"cal\n"
PUNCTUATOR		)
PUNCTUATOR		;
PUNCTUATOR		}
TYPE		int
WORD		3
PUNCTUATOR		(
PUNCTUATOR		)
PUNCTUATOR		{
TYPE		int
WORD		4
PUNCTUATOR		[
NUMBER		6.0
PUNCTUATOR		]
OPERATOR		=
PUNCTUATOR		{
NUMBER		76.0
PUNCTUATOR		,
NUMBER		82.0
PUNCTUATOR		,
NUMBER		90.0
PUNCTUATOR		,
NUMBER		86.0
PUNCTUATOR		,
NUMBER		79.0
PUNCTUATOR		,
NUMBER		62.0
PUNCTUATOR		}
PUNCTUATOR		;
TYPE		int
WORD		5
PUNCTUATOR		[
NUMBER		6.0
PUNCTUATOR		]
OPERATOR		=
PUNCTUATOR		{
NUMBER		2.0
PUNCTUATOR		,
NUMBER		2.0
PUNCTUATOR		,
NUMBER		1.0
PUNCTUATOR		,
NUMBER		2.0
PUNCTUATOR		,
NUMBER		2.0
PUNCTUATOR		,
NUMBER		3.0
PUNCTUATOR		}
PUNCTUATOR		;
TYPE		int
WORD		6
PUNCTUATOR		;
TYPE		float
WORD		7
PUNCTUATOR		,
WORD		8
PUNCTUATOR		;
TYPE		int
WORD		9
PUNCTUATOR		;
TYPE		int
WORD		10
PUNCTUATOR		;
WORD		11
PUNCTUATOR		(
CONST		"please input your student number:"
PUNCTUATOR		)
PUNCTUATOR		;
WORD		12
PUNCTUATOR		(
CONST		"%d"
PUNCTUATOR		,
OPERATOR		&
WORD		6
PUNCTUATOR		)
PUNCTUATOR		;
WORD		8
OPERATOR		=
NUMBER		0.0
PUNCTUATOR		;
WORD		9
OPERATOR		=
NUMBER		0.0
PUNCTUATOR		;
KEYWORD		for
PUNCTUATOR		(
WORD		10
OPERATOR		=
NUMBER		0.0
PUNCTUATOR		;
WORD		10
OPERATOR		<
NUMBER		6.0
PUNCTUATOR		;
WORD		10
OPERATOR		++
PUNCTUATOR		)
PUNCTUATOR		{
WORD		8
OPERATOR		=
WORD		8
OPERATOR		+
WORD		4
PUNCTUATOR		[
WORD		10
PUNCTUATOR		]
OPERATOR		*
WORD		5
PUNCTUATOR		[
WORD		10
PUNCTUATOR		]
PUNCTUATOR		;
WORD		9
OPERATOR		=
WORD		9
OPERATOR		+
WORD		5
PUNCTUATOR		[
WORD		10
PUNCTUATOR		]
PUNCTUATOR		;
PUNCTUATOR		}
WORD		7
OPERATOR		=
WORD		8
OPERATOR		/
WORD		9
PUNCTUATOR		;
KEYWORD		if
PUNCTUATOR		(
WORD		7
OPERATOR		>=
NUMBER		60.0
PUNCTUATOR		)
PUNCTUATOR		{
WORD		7
OPERATOR		=
WORD		7
OPERATOR		-
NUMBER		60.0
PUNCTUATOR		;
WORD		11
PUNCTUATOR		(
CONST		"the score of student number %d is %f higher than 60.\n"
PUNCTUATOR		,
WORD		6
PUNCTUATOR		,
WORD		7
PUNCTUATOR		)
PUNCTUATOR		;
PUNCTUATOR		}
KEYWORD		else
PUNCTUATOR		{
WORD		7
OPERATOR		=
NUMBER		60.0
OPERATOR		-
WORD		7
PUNCTUATOR		;
WORD		11
PUNCTUATOR		(
CONST		"the score of student number %d is %f lower than 60.\n"
PUNCTUATOR		,
WORD		6
PUNCTUATOR		,
WORD		7
PUNCTUATOR		)
PUNCTUATOR		;
PUNCTUATOR		}
KEYWORD		return
NUMBER		0.0
PUNCTUATOR		;
PUNCTUATOR		}
END		#
[('stu_number', 6), ('temp', 9), ('i', 10), ('sum', 8), ('printf', 11), ('credit', 5), ('score', 4), ('cal', 1), ('print', 2), ('main', 3), ('scanf', 12), ('mean', 7)]
TYPE -> (('TYPE', 'int'),)
identifier -> (('WORD', 1),)
post_declarator -> (('PUNCTUATOR', '('), ('PUNCTUATOR', ')'))
compound_statment -> {
statement -> (('PUNCTUATOR', '{'), ('WORD', 2), ('PUNCTUATOR', '('), ('CONST', '"cal\\n"'), ('PUNCTUATOR', ')'), ('PUNCTUATOR', ';'))
statement -> (('PUNCTUATOR', '}'), ('TYPE', 'int'), ('WORD', 3), ('PUNCTUATOR', '('), ('PUNCTUATOR', ')'), ('PUNCTUATOR', '{'), ('TYPE', 'int'), ('WORD', 4), ('PUNCTUATOR', '['), ('NUMBER', 6.0), ('PUNCTUATOR', ']'), ('OPERATOR', '='), ('PUNCTUATOR', '{'), ('NUMBER', 76.0), ('PUNCTUATOR', ','), ('NUMBER', 82.0), ('PUNCTUATOR', ','), ('NUMBER', 90.0), ('PUNCTUATOR', ','), ('NUMBER', 86.0), ('PUNCTUATOR', ','), ('NUMBER', 79.0), ('PUNCTUATOR', ','), ('NUMBER', 62.0), ('PUNCTUATOR', '}'), ('PUNCTUATOR', ';'))
statement -> (('TYPE', 'int'), ('WORD', 5), ('PUNCTUATOR', '['), ('NUMBER', 6.0), ('PUNCTUATOR', ']'), ('OPERATOR', '='), ('PUNCTUATOR', '{'), ('NUMBER', 2.0), ('PUNCTUATOR', ','), ('NUMBER', 2.0), ('PUNCTUATOR', ','), ('NUMBER', 1.0), ('PUNCTUATOR', ','), ('NUMBER', 2.0), ('PUNCTUATOR', ','), ('NUMBER', 2.0), ('PUNCTUATOR', ','), ('NUMBER', 3.0), ('PUNCTUATOR', '}'), ('PUNCTUATOR', ';'))
statement -> (('TYPE', 'int'), ('WORD', 6), ('PUNCTUATOR', ';'))
statement -> (('TYPE', 'float'), ('WORD', 7), ('PUNCTUATOR', ','), ('WORD', 8), ('PUNCTUATOR', ';'))
statement -> (('TYPE', 'int'), ('WORD', 9), ('PUNCTUATOR', ';'))
statement -> (('TYPE', 'int'), ('WORD', 10), ('PUNCTUATOR', ';'))
statement -> (('WORD', 11), ('PUNCTUATOR', '('), ('CONST', '"please input your student number:"'), ('PUNCTUATOR', ')'), ('PUNCTUATOR', ';'))
statement -> (('WORD', 12), ('PUNCTUATOR', '('), ('CONST', '"%d"'), ('PUNCTUATOR', ','), ('OPERATOR', '&'), ('WORD', 6), ('PUNCTUATOR', ')'), ('PUNCTUATOR', ';'))
statement -> (('WORD', 8), ('OPERATOR', '='), ('NUMBER', 0.0), ('PUNCTUATOR', ';'))
statement -> (('WORD', 9), ('OPERATOR', '='), ('NUMBER', 0.0), ('PUNCTUATOR', ';'))
statement -> (('KEYWORD', 'for'), ('PUNCTUATOR', '('), ('WORD', 10), ('OPERATOR', '='), ('NUMBER', 0.0), ('PUNCTUATOR', ';'))
statement -> (('WORD', 10), ('OPERATOR', '<'), ('NUMBER', 6.0), ('PUNCTUATOR', ';'))
statement -> (('WORD', 10), ('OPERATOR', '++'), ('PUNCTUATOR', ')'), ('PUNCTUATOR', '{'), ('WORD', 8), ('OPERATOR', '='), ('WORD', 8), ('OPERATOR', '+'), ('WORD', 4), ('PUNCTUATOR', '['), ('WORD', 10), ('PUNCTUATOR', ']'), ('OPERATOR', '*'), ('WORD', 5), ('PUNCTUATOR', '['), ('WORD', 10), ('PUNCTUATOR', ']'), ('PUNCTUATOR', ';'))
statement -> (('WORD', 9), ('OPERATOR', '='), ('WORD', 9), ('OPERATOR', '+'), ('WORD', 5), ('PUNCTUATOR', '['), ('WORD', 10), ('PUNCTUATOR', ']'), ('PUNCTUATOR', ';'))
statement -> (('PUNCTUATOR', '}'), ('WORD', 7), ('OPERATOR', '='), ('WORD', 8), ('OPERATOR', '/'), ('WORD', 9), ('PUNCTUATOR', ';'))
statement -> (('KEYWORD', 'if'), ('PUNCTUATOR', '('), ('WORD', 7), ('OPERATOR', '>='), ('NUMBER', 60.0), ('PUNCTUATOR', ')'), ('PUNCTUATOR', '{'), ('WORD', 7), ('OPERATOR', '='), ('WORD', 7), ('OPERATOR', '-'), ('NUMBER', 60.0), ('PUNCTUATOR', ';'))
statement -> (('WORD', 11), ('PUNCTUATOR', '('), ('CONST', '"the score of student number %d is %f higher than 60.\\n"'), ('PUNCTUATOR', ','), ('WORD', 6), ('PUNCTUATOR', ','), ('WORD', 7), ('PUNCTUATOR', ')'), ('PUNCTUATOR', ';'))
statement -> (('PUNCTUATOR', '}'), ('KEYWORD', 'else'), ('PUNCTUATOR', '{'), ('WORD', 7), ('OPERATOR', '='), ('NUMBER', 60.0), ('OPERATOR', '-'), ('WORD', 7), ('PUNCTUATOR', ';'))
statement -> (('WORD', 11), ('PUNCTUATOR', '('), ('CONST', '"the score of student number %d is %f lower than 60.\\n"'), ('PUNCTUATOR', ','), ('WORD', 6), ('PUNCTUATOR', ','), ('WORD', 7), ('PUNCTUATOR', ')'), ('PUNCTUATOR', ';'))
statement -> (('PUNCTUATOR', '}'), ('KEYWORD', 'return'), ('NUMBER', 0.0), ('PUNCTUATOR', ';'))
compound_statment -> }
END
success
THE RESULT IS ERROR
